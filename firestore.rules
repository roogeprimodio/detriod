rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isMatchParticipant(matchData) {
      return isAuthenticated() && 
        (matchData.registeredUsers.hasAny([request.auth.uid]));
    }

    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false; // Prevent user deletion
    }
    
    // Games collection
    match /games/{gameId} {
      allow read: if true; // Anyone can read games
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Matches collection
    match /matches/{matchId} {
      allow read: if true; // Anyone can read matches
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Match Registrations Collection
    match /match_registrations/{registrationId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        isAdmin() || 
        (resource.data.userId == request.auth.uid && 
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(["inGameName", "platform", "teamName"]))
      );
      allow delete: if isAdmin() || 
        (isAuthenticated() && resource.data.userId == request.auth.uid);
    }

    // Notifications Collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        resource.data.targetUserId == request.auth.uid || 
        resource.data.targetUserId == "global"
      );
      
      allow create: if isAdmin() || (
        isAuthenticated() && (
          request.resource.data.targetUserId == request.auth.uid ||
          request.resource.data.targetUserId == "global"
        )
      );
      
      allow update: if isAuthenticated() && (
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["readBy"]) &&
        request.resource.data.readBy.hasAll(resource.data.readBy) &&
        request.resource.data.readBy.removeAll(resource.data.readBy).hasOnly([request.auth.uid])
      );
      
      allow delete: if isAdmin();
    }

    // Transactions Collection
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if false; // Never allow transaction deletion
    }
    
    // Events collection
    match /events/{eventId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Streams collection
    match /streams/{streamId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // User profiles collection
    match /userProfiles/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}