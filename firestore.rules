rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isMatchParticipant(matchData) {
      return isAuthenticated() && 
        (matchData.registeredUsers.hasAny([request.auth.uid]));
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // Games Collection
    match /games/{gameId} {
      allow read: if true;
      allow create, update: if isAdmin();
      allow delete: if isAdmin() && 
        !exists(/databases/$(database)/documents/matches/{matchId}) &&
        !('true' in get(/databases/$(database)/documents/matches/{matchId}).data.isActive &&
          gameId == get(/databases/$(database)/documents/matches/{matchId}).data.gameId);
    }

    // Matches Collection
    match /matches/{matchId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAuthenticated() && (
        isAdmin() ||
        (isMatchParticipant(resource.data) && 
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['registeredUsers', 'currentParticipants']))
      );
      allow delete: if isAdmin() && resource.data.status != 'live';
    }

    // Match Registrations Collection
    match /match_registrations/{registrationId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        isAdmin() || 
        (resource.data.userId == request.auth.uid && 
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['inGameName', 'platform', 'teamName']))
      );
      allow delete: if isAdmin() || 
        (isAuthenticated() && resource.data.userId == request.auth.uid);
    }

    // Notifications Collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAdmin();
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      allow delete: if isAdmin() || 
        (isAuthenticated() && resource.data.userId == request.auth.uid);
    }

    // Transactions Collection
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if false; // Never allow transaction deletion
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // Events collection
    match /events/{eventId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Streams collection
    match /streams/{streamId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // User profiles collection
    match /userProfiles/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}