rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return isAuthenticated() && userDoc != null && userDoc.data.isAdmin == true;
    }

    // Users collection
    match /users/{userId} {
      // Allow reading user data for login checks
      allow read: if true;
      // Allow creating new user documents during login
      allow create: if request.auth != null && 
                   request.auth.uid == userId && 
                   request.resource.data.keys().hasAll(['email', 'name']);
      // Allow users to update their own data
      allow update: if request.auth != null && 
                   request.auth.uid == userId && 
                   (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin']) || isAdmin());
      // Only admins can delete users
      allow delete: if isAdmin();
    }

    // User profiles collection
    match /userProfiles/{profileId} {
      // Allow reading all profiles
      allow read: if true;
      // Allow creating new profiles
      allow create: if request.auth != null && request.auth.uid == profileId;
      // Allow updating own profile
      allow update: if request.auth != null && request.auth.uid == profileId;
      // Only admins can delete profiles
      allow delete: if isAdmin();
    }

    // Games collection
    match /games/{gameId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() && 
        request.resource.data.keys().hasAll(['title', 'description', 'imageUrl', 'status']) &&
        request.resource.data.status in ['active', 'inactive'];
      allow update: if isAdmin() && 
        request.resource.data.keys().hasAll(['title', 'description', 'imageUrl', 'status']) &&
        request.resource.data.status in ['active', 'inactive'];
      allow delete: if isAdmin();
    }

    // Matches collection
    match /matches/{matchId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() && 
        request.resource.data.keys().hasAll(['title', 'gameId', 'date', 'status']) &&
        request.resource.data.status in ['upcoming', 'live', 'completed', 'cancelled'];
      allow update: if isAdmin() && 
        request.resource.data.keys().hasAll(['title', 'gameId', 'date', 'status']) &&
        request.resource.data.status in ['upcoming', 'live', 'completed', 'cancelled'];
      allow delete: if isAdmin();
    }

    // Streams collection
    match /streams/{streamId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() && 
        request.resource.data.keys().hasAll(['title', 'url', 'status', 'matchId']);
      allow update: if isAdmin() && 
        request.resource.data.keys().hasAll(['title', 'url', 'status', 'matchId']);
      allow delete: if isAdmin();
    }

    // Match registrations collection
    match /matchRegistrations/{registrationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['userId', 'matchId', 'registeredAt', 'status']) &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin() || 
        (request.auth != null && 
         request.auth.uid == resource.data.userId && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']));
      allow delete: if isAdmin() || 
        (request.auth != null && request.auth.uid == resource.data.userId);
    }

    // Notifications collection
    match /notifications/{notificationId} {
      // Allow reading notifications
      allow list: if request.auth != null;
      allow get: if request.auth != null;

      // Allow admins to create notifications
      allow create: if isAdmin();

      // Allow admins to update any notification
      allow update: if isAdmin();

      // Allow users to update readBy array for their own notifications
      allow update: if request.auth != null && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy', 'status']) &&
        request.resource.data.readBy.hasAll(resource.data.readBy) &&
        request.resource.data.readBy.removeAll(resource.data.readBy).hasOnly([request.auth.uid]);

      // Allow admins to delete notifications
      allow delete: if isAdmin();
    }
  }
}
